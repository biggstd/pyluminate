"""
===================
RDF Reader Utilites
===================

This module contains helper functions for importing RDF data by
reading a metadata file generated by ISA-tools.
"""

import pandas as pd
import json
import collections


def create_pandas_df(path):
    """
    Create a pandas dataframe from a given path. This function is specific
    for the type of RDF data produced by Maxime (and David?).

    It reads the csv, and removes the erroneously created '#' column.
    Although it may be better to use some string manipulation to remove this
    character prior to processing with pandas read_csv function.
    """
    # Read the csv file
    df = pd.read_csv(
        filepath_or_buffer=path,
        index_col=False,
        sep='\s+'  # Split by whitespace
    )

    # Move the columns to deal with the leading hashtag
    df_mod = df[df.columns[:-1]]
    df_mod.columns = df.columns[1:]

    return df_mod


def read_rdf(json_metadata_path, char_types):
    """Construct dataframes with the needed metadata attached.
    Returns a list of pandas dataframe objects.

    For each assay generate a list of the characteristic category values.

    For each data file in that assay, create a new column and write all
    found category values to that column.

    char_types should be a list.
    """

    # Open the file.
    with open(json_metadata_path, 'r') as f:
        metadata = json.load(f)

    # Create an empty list to append the paths to.
    data_frame_list = []

    # Iterate through the studies.
    for studies in metadata['studies']:
        for assays in studies['assays']:
            # Create the empty assay characteristic list.
            # assay_char_l = list()
            assay_char_dict = collections.defaultdict(list)
            # Iterate through the characteristic_categories assigned.
            for char in assays['characteristicCategories']:
                # append the termSource value to the assay_char list.
                # A colllections defaultdict is used to ensure all entries
                # are lists, so that append() can be used.
                assay_char_dict[
                    char['characteristicType']['termSource']].append(
                        char['characteristicType']['annotationValue'])
            # Ensure that the desired values are in this new dictioaries keys.
            # If so, create a new data frame.
            if set(char_types).intersection(assay_char_dict.keys()):
                for data_file in assays['dataFiles']:
                    new_data_frame = create_pandas_df(data_file['name'])
                    # append the dict of characteristics as an attribute to
                    # the pandas dataframe object. This attribute will be
                    # easily lost upon dataframe manipulations.
                    new_data_frame.characteristics = assay_char_dict
                    data_frame_list.append(new_data_frame)

    return data_frame_list
